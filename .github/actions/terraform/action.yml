name: 'Terraform'
description: 'Run Terraform'

inputs:
  environment:
    description: 'Environment which should be started/stopped'
    required: true
    default: "lab"
  action:
    description: 'Action to be taken'
    required: true
    default: "apply"
  apply:
    description: 'Apply the configuration?'
    required: true
    default: false
  TF_VAR_EXOSCALE_API_KEY:
    description: "Exoscale API Key"
    required: true
  TF_VAR_EXOSCALE_API_SECRET:
    description: "Exoscale API Secret"
    required: true
  # test
  IAC_DEPLOY_KEY:
    description: "IAC_DEPLOY_KEY"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Export environment variables
      shell: bash
      run: |
        TF_VAR_EXOSCALE_API_KEY="${{ inputs.TF_VAR_EXOSCALE_API_KEY }}"
        echo "TF_VAR_EXOSCALE_API_KEY=${TF_VAR_EXOSCALE_API_KEY}" >> $GITHUB_ENV

        TF_VAR_EXOSCALE_API_SECRET="${{ inputs.TF_VAR_EXOSCALE_API_SECRET }}"
        echo "TF_VAR_EXOSCALE_API_SECRET=${TF_VAR_EXOSCALE_API_SECRET}" >> $GITHUB_ENV

    - name: Export multiline-string environment variables
      shell: bash
      run: |
        echo 'IAC_DEPLOY_KEY<<EOF' >> $GITHUB_ENV
        ${{ inputs.IAC_DEPLOY_KEY }} >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: debug test IAC_DEPLOY_KEY
      shell: bash
      run: echo "${IAC_DEPLOY_KEY}"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./terraform/line-infra
      id: init
      shell: bash
      run: |
        terraform init

    # - name: select workspace
    #   working-directory: ./terraform/line-infra
    #   shell: bash
    #   run: terraform workspace select ${{ inputs.environment }}

    - name: terraform fmt
      working-directory: ./terraform/line-infra
      shell: bash
      run: terraform fmt --recursive

    - name: "Terraform validate"
      working-directory: ./terraform/line-infra
      shell: bash
      run: terraform validate

    - name: "Terraform plan"
      if: inputs.action == 'apply'
      working-directory: ./terraform/line-infra
      shell: bash
      run: terraform plan
    - name: "Terraform plan -destroy"
      if: inputs.action == 'destroy'
      working-directory: ./terraform/line-infra
      shell: bash
      run: terraform plan -destroy

    - name: "Terraform apply"
      if: inputs.apply == 'true' && inputs.action == 'apply'
      working-directory: ./terraform/line-infra
      shell: bash
      run: terraform apply -auto-approve
    - name: "Terraform destroy"
      if: inputs.apply == 'true' && inputs.action == 'destroy'
      working-directory: ./terraform/line-infra
      shell: bash
      run: terraform destroy -auto-approve
