name: CI/CD

on:
  # release:
  #   types: [published]
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  TF_VAR_EXOSCALE_API_KEY: '${{ secrets.TF_VAR_EXOSCALE_API_KEY }}'
  TF_VAR_EXOSCALE_API_SECRET: '${{ secrets.TF_VAR_EXOSCALE_API_SECRET }}'

  # renovate: datasource=github-releases depName=exoscale/cli
  EXO_CLI_VERSION: v1.74.4

  # renovate: datasource=github-releases depName=hashicorp/terraform
  TERRAFORM_VERSION: 1.5.6
  # TERRAFORM_VERSION: 1.5.7

  # renovate: datasource=github-tags depName=kubernetes/kubectl
  KUBECTL_VERSION: v1.21.2

  # test
  IAC_DEPLOY_KEY: '${{ secrets.IAC_DEPLOY_KEY }}'

jobs:
  release-please:
    if: github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          package-name: package1
          token: ${{ secrets.GITHUB_TOKEN }}

  terraform_dryrun_matrix:
    name: "[dry-run] terraform plan ${{ matrix.environment }}"
    strategy:
      fail-fast: false
      matrix:
        environment:
          - dev
          - demo
          - prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: "terraform plan ${{ matrix.environment }}"
        uses: "./.github/actions/terraform"
        with:
          environment: ${{ matrix.environment }}
          action: apply
          apply: false
          TF_VAR_EXOSCALE_API_KEY: ${{ env.TF_VAR_EXOSCALE_API_KEY }}
          TF_VAR_EXOSCALE_API_SECRET: ${{ env.TF_VAR_EXOSCALE_API_SECRET }}
          # test
          IAC_DEPLOY_KEY: ${{ env.IAC_DEPLOY_KEY }}

  terraform_apply_demo:
    name: "apply demo environment"
    needs:
      - terraform_dryrun_matrix
      - release-please
    if: needs.release-please.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    environment: demo
    concurrency:
      group: demo
    steps:
      - uses: actions/checkout@v3
      - name: "terraform apply demo"
        uses: "./.github/actions/terraform"
        with:
          environment: demo
          action: apply
          apply: true
          TF_VAR_EXOSCALE_API_KEY: ${{ env.TF_VAR_EXOSCALE_API_KEY }}
          TF_VAR_EXOSCALE_API_SECRET: ${{ env.TF_VAR_EXOSCALE_API_SECRET }}

  terraform_apply_prod:
    name: "apply prod environment"
    needs:
      - terraform_apply_demo
      - terraform_dryrun_matrix
      - release-please
    if: needs.release-please.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    environment: prod
    concurrency:
      group: prod
    steps:
      - uses: actions/checkout@v3
      - name: "terraform apply prod"
        uses: "./.github/actions/terraform"
        with:
          environment: prod
          action: apply
          apply: true
          TF_VAR_EXOSCALE_API_KEY: ${{ env.TF_VAR_EXOSCALE_API_KEY }}
          TF_VAR_EXOSCALE_API_SECRET: ${{ env.TF_VAR_EXOSCALE_API_SECRET }}
